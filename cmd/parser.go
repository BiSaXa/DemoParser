package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"os"
	"strings"
	"sync"
	"time"

	"github.com/pektezol/bitreader"
	"github.com/pektezol/sdp.go/pkg/packets"
	"github.com/pektezol/sdp.go/pkg/writer"
)

type Demo struct {
	Headers  packets.Headers   `json:"headers"`
	Messages []packets.Message `json:"messages"`
}

type Parser struct {
	DemoPath string
	writer   strings.Builder
}

func NewParser(demoPath string) *Parser {
	return &Parser{
		DemoPath: demoPath,
	}
}

const littleEndian bool = true

func timeTrack(start time.Time, name string) {
	elapsed := time.Since(start)
	log.Printf("%s took %s", name, elapsed)
}

func main() {
	defer timeTrack(time.Now(), "parse")
	if len(os.Args) != 2 {
		fmt.Println("specify file in command line arguments")
		os.Exit(1)
	}
	parser := NewParser(os.Args[1])
	demos, err := parser.ParseDemos()
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
	for _, d := range demos {
		out, _ := json.Marshal(d)
		fmt.Printf(string(out))
		break
	}
	// fmt.Println(parser.GetOutput())
}

func (p *Parser) GetOutput() string {
	return p.writer.String()
}

func (p *Parser) ParseDemos() ([]*Demo, error) {
	writer.AppendLine("Generated By: github.com/pektezol/sdp.go")
	files, err := os.ReadDir(p.DemoPath)
	if err != nil {
		// not a directory
		file, err := os.Open(p.DemoPath)
		if err != nil {
			return []*Demo{}, err
		}
		defer file.Close()
		demo := &Demo{}
		reader := bitreader.NewReader(file, littleEndian)
		demoParserHandler(reader, file.Name(), demo, nil)
		p.writer = writer.GetWriter()
		return []*Demo{demo}, nil
	} else {
		// directory
		demoCount := 0
		for _, fileinfo := range files {
			if len(fileinfo.Name()) > 4 && fileinfo.Name()[len(fileinfo.Name())-4:] == ".dem" {
				demoCount++
			}
		}
		wg := new(sync.WaitGroup)
		wg.Add(demoCount)
		demos := make([]*Demo, demoCount)
		for i := 0; i < len(demos); i++ {
			demos[i] = &Demo{}
		}
		for i, fileinfo := range files {
			if len(fileinfo.Name()) > 4 && fileinfo.Name()[len(fileinfo.Name())-4:] == ".dem" {
				file, err := os.Open(p.DemoPath + fileinfo.Name())
				if err != nil {
					return []*Demo{}, err
				}
				defer file.Close()
				// reader := bitreader.NewReader(file, littleEndian)
				go demoParserHandler(bitreader.NewReader(file, littleEndian), file.Name(), demos[i], wg)
				// demos = append(demos, demo)
			}
		}
		wg.Wait()
		p.writer = writer.GetWriter()
		if len(demos) == 0 {
			return demos, errors.New("no demo found in given directory")
		}
		return demos, nil
	}
}

func demoParserHandler(reader *bitreader.Reader, filename string, demo *Demo, wg *sync.WaitGroup) {
	writer.AppendLine("\nFile Name: %s", filename)
	// this is for recovering after a panic inside parse headers and packet.
	// this approach was taken since error handling bitreader functions would take a long time.
	defer func() {
		if err := recover(); err != nil {
			if wg != nil {
				wg.Done()
			}
			writer.AppendLine("failed to parse demo: %v", err)
		}
	}()
	// log.Println("finished with", demo)
	demo.Headers = packets.ParseHeaders(reader)
	for {
		message := packets.ParseMessage(reader)
		demo.Messages = append(demo.Messages, message)
		if message.PacketType == 7 {
			if wg != nil {
				wg.Done()
			}
			break
		}
	}
	// return demo
}
